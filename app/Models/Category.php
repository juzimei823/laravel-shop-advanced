<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
/**

   当你创建模型的时候Eloquent并不知道你你创建的模型对应的那个数据表
   如果不指定默认是你模型类名的复数形式 categorys

 */
class Category extends Model
{
    //自定义 模型关联的数据表

    //protected $table = '';

    //容许模型属性批量赋值
    protected $fillable = [

        'name','is_directory','level','path'

    ];
     //禁止模型赋值的属性 两则不能同时使用
//    protected $guarded= [
//
//    ];

    //
    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub


        //监听categroy的创建事件 初始化对应的属性

         static::creating(function(Category $category){

               if(is_null($category->parent_id)){

                   $category->level = 0;

                   $category->path = '-';
               }else{
                   $category->level = $category->parent->level+1;

                   $category->path = $category->parent->path.$category->parent_id.'-';

               }




         });





//        dump(111);

    }


    //关联父级模型   子分类  关联父分类   反向一对多
    public function parent(){


    	 return $this->belongsTo(Category::class);
    }


    //关联分类子集模型 分类子集  一对多的关系


    public function children(){
         //默认模型会确定  当前类的名称_id为关联模型的外键 Category_id

        return $this->hasMany(Category::class,'parent_id');

    }
   //栏目模型 关联产品模型   是一对多的关系
    public function products(){

        return $this->hasMany(Product::class,'category_id');
    }

    // 定一个一个访问器，获取所有祖先类目的 ID 值
    public function getPathIdsAttribute()
    {

//        return explode('-', trim($this->path, '-'));
        // trim($str, '-') 将字符串两端的 - 符号去除
        // explode() 将字符串以 - 为分隔切割为数组
        // 最后 array_filter 将数组中的空值移除
        return array_filter(explode('-', trim($this->path, '-')));
    }

    // 定义一个访问器，获取所有祖先类目并按层级排序
    public function getAncestorsAttribute()
    {
        return Category::query()
            // 使用上面的访问器获取所有祖先类目 ID
            ->whereIn('id', $this->path_ids)
            // 按层级排序
            ->orderBy('level')
            ->get();
    }

    //定义一个访问器



}
